#!/usr/bin/env bash

user=$(id -u -n)
 
kshift_timer_loc="/home/$user/.config/systemd/user/kshift.timer"
kshift_service_loc="/home/$user/.config/systemd/user/kshift.service"

# tells to update timer
update_timer=1

### User Vars ###

if [ -f "/home/$user/.kshift" ]; then
    source "/home/$user/.kshift"
elif [ -f "./defaults" ]; then
    source "./defaults"
else

    # Location code from: https://weather.codes/search/
    location="USNY0996"

    sunrise="06:00"
    sunset="18:00"

    rise_delay=2
    set_delay=0

    night_theme="BreezeDark"
    day_theme="BreezeLight"

    net_timeout=10

fi

tmpfile="/tmp/$location.out"

# if install option is used
bool_install=0

# If time is changed through options
bool_timechange=0

# day is 1, night is 2
day_or_night_force=0


usage () {
    echo -e "Usage: kshift OPTIONS [ --install ] [ -h/--help ]\n"
    echo -e "Sets the system theme to light or dark based on if it is before or after sunrise/sunset"
    echo -e "After sunrise but before sunset (including delays), is set to light mode "
    echo -e "Otherwise, the theme is set to dark mode\n"
    echo -e "  -l  / --location       LOCATION   - sets the location code\n"

    echo -e "  -r  / --sunrise        TIME       - sets default sunrise time"
    echo -e "  -s  / --sunset         TIME       - sets default sunset time"
    echo -e "  -rd / --risedelay      HOURS      - delay of sunrise day theme change"
    echo -e "  -sd / --setdelay       HOURS      - delay of sunset night theme change\n"

    echo -e "  -th / --theme          THEME      - Overrides day and night theme"
    echo -e "  -w  / --wallpaper      IMAGE      - Overrides day and night wallpaper\n"

    echo -e "  -n  / --night                     - sets the sunset to current time, making it night."
    echo -e "  -nt / --nightheme      THEME      - theme to be changed to at night"
    echo -e "  -nw / --nightwallpaper IMAGE      - wallpaper to be changed to at night\n"

    echo -e "  -d  / --day                       - sets the sunrise to current time, making it day."
    echo -e "  -dt / --daytheme       THEME      - theme to be changed to during the day"
    echo -e "  -dw / --daywallpaper   IMAGE      - wallpaper to be changed to during the day\n"

    echo -e "  -t  / --timeout        SECONDS    - network timeout\n"

    echo -e "  -i  / --info                      - Prints status and info of kshift timer and variables"
    echo -e "  -h  / --help                      - Prints this message"
    echo -e "  --install                         - creates a systemd timer and service for automatic kshift\n"
    echo -e "The intall command will use the current script variables to write a variable file to ~/.kshift.\nUsing the other command options will influence the install."
}

info () {
    if [ ! -f $kshift_timer_loc ]; then
        echo -e "Kshift is not installed. Rerun with the '--install' option."
    else
        kshift_status=$(systemctl --user status kshift.timer | grep loaded | awk '{print $4}' | sed s/\;//)
        timer_sunrise=$(cat $kshift_timer_loc | grep OnCalendar | awk '{print $2}' | sed s/:00// | head -1)
        timer_sunset=$(cat $kshift_timer_loc | grep OnCalendar | awk '{print $2}' | sed s/:00// | tail -1)

        if [[ $kshift_status == "enabled" ]]; then 
            echo -e "Kshift enabled:"
            echo -e "    Sunrise kshift at $timer_sunrise"
            echo -e "    Sunset kshift at $timer_sunset\n"
        else
            echo -e "Kshift disabled.\n"
        fi

        echo -e "kshift local variables @ ~/.kshift\n"
        cat "/home/$user/.kshift"
    fi

}



while true; do
    case "$1" in
        -l | --location ) location="$2"; shift 2;;

        -r | --sunrise ) sunrise="$2"; bool_timechange=1; shift 2;;
        -s | --sunset ) sunset="$2"; bool_timechange=1; shift 2;;
        -rd | --risedelay ) rise_delay="$2"; shift 2;;
        -sd | --setdelay ) set_delay="$2"; shift 2;;

        -th | --theme ) theme="$2"; shift 2;;
        -w  | --wallpaper ) wallpaper="$2"; shift 2;;

        -n  | --night ) day_or_night_force=2; shift 1;; 
        -nt | --nightheme ) night_theme="$2"; shift 2;;
        -nw | --nightwallpaper ) night_wallpaper="$2"; shift 2;;

        -d  | --day ) day_or_night_force=1; shift 1;;
        -dt | --daytheme ) day_theme="$2"; shift 2;;
        -dw | --daywallpaper ) day_wallpaper="$2"; shift 2;;

        -t | --timeout ) net_timeout="$2"; shift 2;;

        -i | --info ) info; exit;;
        --install ) bool_install=1; shift 1;;
        -h | --help ) usage; exit;;
        * ) break ;;
    esac
done

    kshift_timer="\n[Unit]\nDescription=kshift timer\n\n[Timer]\nOnStartupSec=1s\nOnCalendar=*-*-* $sunrise:00\nOnCalendar=*-*-* $sunset:00\nPersistent=true\n\n[Install]\nWantedBy=timers.target"

### Systemd Service and Timer ###
set_systemd () {

    kshift_service="[Unit]\nDescription=kshift service\n\n[Service]\nExecStart=/home/$user/.local/bin/kshift"

    kshift_vars="location=\"$location\"\n\nsunrise=\"$sunrise\"\nsunset=\"$sunset\"\n\nrise_delay=$rise_delay\nset_delay=$set_delay\n\nnight_theme=\"$night_theme\"\nday_theme=\"$day_theme\"\n\nnet_timeout=$net_timeout\n\nday_wallpaper=$day_wallpaper\nnight_wallpaper=$night_wallpaper"

   SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

   mkdir -p ~/.local/bin
   cp $SCRIPT_DIR/`basename $0` /home/$user/.local/bin/kshift

   echo -e $kshift_vars > /home/$user/.kshift

   mkdir -p /home/$user/.config/systemd/user/

   echo -e $kshift_service > $kshift_service_loc 
   echo -e $kshift_timer > $kshift_timer_loc 

   systemctl --user daemon-reload
   systemctl --user enable kshift.timer
   systemctl --user start kshift.timer
}

update_timer () {

   echo -e $kshift_timer > $kshift_timer_loc
   systemctl --user daemon-reload

}

web_sundata () {

    ### Gather Sun Data ###

    if [ ! -f "$tmpfile" ]; then

        i=0
        while ! nc -zw1 weather.com 443 2> /dev/null && [ $i -lt $net_timeout ]; do 
            sleep 1
            ((i+=1))
        done

        if [ $i -lt $net_timeout ]; then
            wget -q "https://weather.com/weather/today/l/$location" -O "$tmpfile"
        fi
    fi

    if [[ -f "$tmpfile" ]]; then
        SUNR=$(grep SunriseSunset "$tmpfile" | grep -oE '((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))' | head -1)
        SUNS=$(grep SunriseSunset "$tmpfile" | grep -oE '((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))' | tail -1)

        [ $bool_timechange == 0 ] && sunrise=$(date --date="$SUNR" +%R)
        [ $bool_timechange == 0 ] && sunset=$(date --date="$SUNS" +%R)

        ### Time Delays ###

        IFS=":"

        read -a rise_arr <<< "$sunrise"
        read -a set_arr <<< "$sunset"

        rise_arr[0]="$((${rise_arr[0]} + $rise_delay))"
        set_arr[0]="$((${set_arr[0]} + $set_delay))"

        IFS=""

        sunrise=${rise_arr[0]}:${rise_arr[1]} 
        sunset=${set_arr[0]}:${set_arr[1]}

    fi

    if [[ -f $kshift_timer_loc && $update_timer == 1 ]]; then 
        update_timer
    fi
}


kshift () {

    ### Epoch Times ###

    curr_e=$(date +%s)
    sunrise_e=$(date -d $sunrise +%s)
    sunset_e=$(date -d $sunset +%s)

    ### Day/Night Switching ###

    exported_vars="export DISPLAY=:0 && export XDG_RUNTIME_DIR=/run/user/$(id -u) &&"

    curr_theme=$(plasma-apply-colorscheme --list-schemes | grep current | awk '{print $2}')

    if [[ $day_or_night_force == 1 || ($day_or_night_force != 2 && $curr_e -ge $sunrise_e && $curr_e -le $sunset_e) ]]; then

        [ -z "$theme" ] && theme=$day_theme
        [ -z "$wallpaper" ] && wallpaper=$day_wallpaper

    else

        [ -z "$theme" ] && theme=$night_theme
        [ -z "$wallpaper" ] && wallpaper=$night_wallpaper

    fi


    ### Color Theme Set ###

    [[ $curr_theme != $theme ]] && eval "$exported_vars plasma-apply-colorscheme $theme"

    ### Wallpaper Set ###

    [ ! -z "$wallpaper" ] && eval "$exported_vars plasma-apply-wallpaperimage $wallpaper"

}

### Main ###

if [ -f $kshift_timer_loc ]; then

    if [ $bool_timechange == 0 ]; then
        sunrise=$(cat $kshift_timer_loc | grep -e "OnCalendar" | awk '{print $2}' | sed "s/:00//" | head -n 1)
        sunset=$(cat $kshift_timer_loc | grep -e "OnCalendar" | awk '{print $2}' | sed "s/:00//" | tail -n 1)
    fi

    kshift
    web_sundata

else

    web_sundata
    kshift

fi

[ $bool_install == 1 ] && set_systemd

exit 0
