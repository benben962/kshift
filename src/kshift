#!/usr/bin/env python

import argparse
import os

import conf
import theme


themes = []
themes_dic = {}

c = conf.config();

# This loop goes through the data from the yaml file
# it iterates over the attributes for theme, currently colorscheme, wallpaper, and color
# it then sets a local var to these items and uses it to make a Theme var
# The theme var is stored in an array and a dictionary
for name in c.data["themes"]:
    loc_vars = locals()
    for att in theme.Theme.attributes:
        try:
            loc_vars.__setitem__(att,c.data["themes"][name][att])
        except (KeyError, TypeError):
            loc_vars.__setitem__(att,None)

    if type(time).__name__ != 'list':
        time = [time]

    for ti in time:
        t = theme.Theme(name, colorscheme, wallpaper, command, ti ) 

        themes_dic[name] = t
        themes.append(t)

#themes = sorted(themes)
themes = sorted(themes_dic.values(), reverse=True)


###################################
# IO Functions
###################################

# Writes the kshift.timer
# Creates a new trigger for every theme time
def write_timer():

    file = open(c.kshift_timer_loc,"w")

    file.write("\n[Unit]\nDescription=kshift timer\n\n[Timer]\nOnStartupSec=1s\n")

    for theme in themes:
        if theme.time:
            time = theme.time.strftime("%H:%M")
            file.write("OnCalendar=*-*-* "+time+":00\n")

    file.write("Persistent=true\n\n[Install]\nWantedBy=timers.target")

    file.close()


    os.system("systemctl --user daemon-reload")
    os.system("systemctl --user restart kshift.timer")


# Installs kshift
# Copies executable, creates config file, utilizes the write timer func, and enables the timer
def install():

    exec_name = os.path.basename(__file__) 

    kshift_service="[Unit]\nDescription=kshift service\n\n[Service]\nExecStart="+c.home+"/.local/bin/"+exec_name

    print("Linking Kshift to .local/bin...")
    os.makedirs(c.home+"/.local/bin/", exist_ok=True)

    os.system("ln -s -f "+__file__+" "+c.home+"/.local/bin/"+exec_name)

    var_loc = c.config_loc
    # Make config dir, possibly read config env
    if not os.path.exists(c.config_loc_base):
        os.makedirs(c.config_loc_base)

    if not os.path.exists(var_loc):
        print("Copying 'defaults.yml' to"+ var_loc+"...")
        os.system("cp defaults.yml "+var_loc)

    os.makedirs(c.home+"/.config/systemd/user", exist_ok=True)

    print("Writing kshift.service and kshift.timer...")
    file = open(c.kshift_service_loc, "w")
    file.write(kshift_service)
    file.close()

    write_timer()

    print("Enabling kshift.timer...")
    os.system("systemctl --user daemon-reload")
    os.system("systemctl --user enable kshift.timer")
    os.system("systemctl --user start kshift.timer")


# Removes Kshift timer
def remove_self():

    print("Removing kshift.timer and service...")

    os.system("systemctl --user stop kshift.timer")
    os.system("systemctl --user disable kshift.timer")

    os.remove(c.kshift_timer_loc)
    os.remove(c.kshift_service_loc)

    os.system("systemctl --user daemon-reload")

###################################
# Arg parsing
###################################

parser = argparse.ArgumentParser(description="KDE Theme Switching")

parser.add_argument("-w", "--wallpaper", help="Sets the current wallpaper", type=str, required=False)
parser.add_argument("-c","--colorscheme", type=str,help="Sets the colorscheme", required=False)
parser.add_argument("-t", "--theme", help="Sets the theme", type=str, choices=list(c.data["themes"].keys()), required=False)


# These cannot be called together 
install_g = parser.add_mutually_exclusive_group(required=False)
install_g.add_argument("--install", help="Installs Kshift", action="store_true")
install_g.add_argument("--remove", help="Removes Kshift", action="store_true")
install_g.add_argument("-s", "--status", help="Displays kshift timing information", action='store_true')


args = parser.parse_args()

if args.status:

    c.status()

elif args.install:

    answer = input("Are you sure you want to install Kshift? [y/n]: ")
    if answer == "Y" or answer == "y" or answer == "yes":
        install()

elif args.remove:

    answer = input("Are you sure you want to remove Kshift? [y/n]: ")
    if answer == "Y" or answer == "y" or answer == "yes":
        remove_self()

else:

    if args.theme:
        themes_dic[args.theme].kshift()

    elif args.colorscheme or args.wallpaper:
        theme.Theme("tmp", args.colorscheme, args.wallpaper, None, None).kshift()

    else:

        theme_to_be = None

        # if the time is >= the theme time, it should be that one to switch
        # if none is greater, then do nothing.
        for theme in themes:

            if theme.time == None:
                break
            elif c.today >= theme.time:
                theme_to_be = theme
                break
   
        if theme_to_be:
            theme_to_be.kshift()

    write_timer()

